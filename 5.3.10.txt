Модифицируйте reducer из предыдущего задания так, чтобы он расcчитывал PageRank с учетом случайного перехода, т.е. первого члена в формуле:

Для всех тестов считайте, что N = 5,  α = 0,1.

Входные и выходные данные: В качестве ключа идет номер вершины. Значение составное: через табуляцию записано значение PageRank 
(округленное до 3-го знака после запятой) и список смежных вершин (через "," в фигурных скобках).

Пример работы reducer приведен для графа из лекции (при этом номера вершин приведены без n):

https://ucarecdn.com/88aa9d54-f2e8-4010-b255-9107b4290e84/

Sample Input:
  1	0.067	{}
  1	0.200	{2,4}
  2	0.067	{}
  2	0.100	{}
  2	0.200	{3,5}
  3	0.067	{}
  3	0.100	{}
  3	0.200	{4}
  4	0.100	{}
  4	0.200	{}
  4	0.200	{5}
  5	0.100	{}
  5	0.200	{}
  5	0.200	{1,2,3}

Sample Output:
  1	0.080	{2,4}
  2	0.170	{3,5}
  3	0.170	{4}
  4	0.290	{5}
  5	0.290	{1,2,3}



#python3
import sys
import re

prevVertex = None
currVertex = None

alfa = 0.1
N = 5

for line in sys.stdin:

    if prevVertex == None:
        prevVertex, prevWeight, prevDict = line.strip().split()
        prevWeight = '0'

    currVertex, currWeight, currDict = line.strip().split()

    currWeight = float(currWeight)
    prevWeight = float(prevWeight)

    if currDict != '{}':
        currWeight = float(0)

    if currVertex == prevVertex:
        currWeight = currWeight + prevWeight
        if prevDict != '{}':
            currDict = prevDict
    else:
        print('%s\t%s\t%s' % (prevVertex, "{:.3f}".format(round(alfa/N + (1-alfa)*prevWeight,3)), prevDict))

    prevVertex, prevWeight, prevDict = currVertex, currWeight, currDict

print('%s\t%s\t%s' % (prevVertex, "{:.3f}".format(round(alfa/N + (1-alfa)*prevWeight,3)), prevDict))
